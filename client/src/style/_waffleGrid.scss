/*!
Waffle Grid
*/
// Waffle Grid Variables
// https://github.com/lucasgruwez/waffle-grid/wiki/Using-the-grid

// Class names
// Change them to whatever you're used to
$grid-classname: "grid" !default;
$row-classname: "row" !default;
$column-classname: "col" !default;
$container-classname: "container" !default;

// Column amounts, results in:
// .col-n-of-4, or .col-n-of-8, or .col-n-of-12
$grid-columns: (4, 5, 6, 8) !default;

// Gutter width
$gutter-width: 20px !default;

// Grid width and max-width.
// It is automatically centered on the page.
$grid-width: 1140px !default;
$grid-max-width: 95% !default;

// Pushes and Pulls
$pushes: true !default;
$pulls: true !default;
$centers: true !default;
$left-push: true !default;
$right-push: true !default;

// Breakpoints. Structure:
// name: (screen-width, column-amounts)
$breakpoints: (
	m: ($medium_size, (4, 6, 8)),
	l: ($large_size, (4, 8, 10, 12)),
) !default;

.#{$grid-classname} {
	display: flex;
	flex-direction: column;
	width: $grid-width;
	max-width: $grid-max-width;
	margin: 0 auto;

	&.full-width {
		width: 100%;
		max-width: 100%;
	}
}

.#{$row-classname} {
	display: flex;
	flex-direction: row;
	width: 100%;
	flex-wrap: wrap;
}

.#{$column-classname} {
  box-sizing: border-box;
  padding: 0 $gutter-width / 2;
  vertical-align: top;
}

.w-auto {
	flex: 1
}

@each $col-am in $grid-columns {
	@for $i from 1 through $col-am {

		.#{$column-classname}-#{$i}-of-#{$col-am} {
			width: calc(#{percentage($i/$col-am)});
			padding: 0 #{$gutter-width/2};
		} // end width

		@if ($pushes) {
			.push-#{$i}-of-#{$col-am} {
				width: calc(#{percentage($i/$col-am)});
				padding: 0 #{$gutter-width/2};
				margin-left: calc(#{percentage($i/$col-am)});
			}
		} // end pushes

		@if ($pulls) {
			.pull-#{$i}-of-#{$col-am} {
				width: calc(#{percentage($i/$col-am)});
				padding: 0 #{$gutter-width/2};
				margin-right: calc(#{percentage($i/$col-am)});
			}
		} // end pulls

		@if ($centers) {
			.center-#{$i}-of-#{$col-am} {
				width: calc(#{percentage($i/$col-am)});
				padding: 0 #{$gutter-width/2};
				margin-left: auto;
				margin-right: auto;
			}
		} // end centers

		@if ($left-push) {
			.left-#{$i}-of-#{$col-am} {
				width: calc(#{percentage($i/$col-am)});
				padding: 0 #{$gutter-width/2};
				margin-right: auto;
			}
		} // end left-push

		@if ($right-push) {
			.right-#{$i}-of-#{$col-am} {
				width: calc(#{percentage($i/$col-am)});
				padding: 0 #{$gutter-width/2};
				margin-left: auto;
			}
		} // end right-push
	} // end for
} // end each

@each $bp in $breakpoints {
	$bp-name: nth($bp, 1);
	$bp-width: nth(nth($bp, 2), 1);
	$bp-col-ams: nth(nth($bp, 2), 2);

	@media (min-width: $bp-width) {
		.#{$bp-name}-hide {display: none;}
		.w-#{$bp-name}-auto {flex: 1}

		@each $col-am in $bp-col-ams {
			@for $i from 1 through $col-am {

				.#{$column-classname}-#{$bp-name}-#{$i}-of-#{$col-am} {
					width: calc(#{percentage($i/$col-am)});
				} // end width

				@if ($pushes) {
					.push-#{$bp-name}-#{$i}-of-#{$col-am} {
						margin-left: calc(#{percentage($i/$col-am)});
					}
				} // end pushes

				@if ($pulls) {
					.pull-#{$bp-name}-#{$i}-of-#{$col-am} {
						margin-right: calc(#{percentage($i/$col-am)});
					}
				} // end pulls

				@if ($centers) {
					.center-#{$bp-name}-#{$i}-of-#{$col-am} {
						width: calc(#{percentage($i/$col-am)});
						margin-left: auto;
						margin-right: auto;
					}
				} // end centers

				@if ($left-push) {
					.left-#{$bp-name}-#{$i}-of-#{$col-am} {
						width: calc(#{percentage($i/$col-am)});
						margin-right: auto;
					}
				} // end left-push

				@if ($right-push) {
					.right-#{$bp-name}-#{$i}-of-#{$col-am} {
						width: calc(#{percentage($i/$col-am)});
						margin-left: auto;
					}
				} // end right-push

			} // end for
		} // end each
		.grid-#{$bp-name} { max-width: 95%; }
	}
}

@function reverse($list, $recursive: false) {
   $result: ();
   @for $i from length($list)*-1 through -1 {
      @if type-of(nth($list, abs($i))) == list and $recursive {
        $result: append($result, reverse(nth($list, abs($i)), $recursive));
      }
      @else {
        $result: append($result, nth($list, abs($i)));
      }
   }
   @return $result;
}

@each $bp in reverse($breakpoints) {
	$bp-name: nth($bp, 1);
	$bp-width: nth(nth($bp, 2), 1);

	@media (max-width: $bp-width) {
		.#{$bp-name}-and-lower { display: none; }
		.#{$bp-name}-and-higher { display: none; }
	}
}
